load("@pip//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_library")
load(":generate_files.bzl", "py_library_test")
#load("//pytest_wrapper:defs.bzl", "py_pytest_test")


filegroup(
  name = "test-files",
  srcs = glob(["test/*_test.py"]),
)

filegroup(
  name = "solution-files",
  srcs = glob(["*.py"]),
)

py_library_test(
    name = "add_two_linked_lists",
    deps = ["//python_solutions/util:linked_list"],
    test_deps = [
        "//python_solutions/util:linked_list", 
    ],
)

# NOTE: To speed up the build, I've created a single task to reduce the number of invocation of the Python interpreter
# Although this seems faster, this requires re-specifying all srcs and tests which I'm not sure is right
#
#py_test(
#  name="all-tests",
#  main="runner.py",
#  srcs=["runner.py", ":test-files"],
#  args=["--color=yes", "$(locations :test-files)"],
#  deps=[
#    requirement("pytest"),
#    "//python_solutions/util:linked_list", 
#    "add_two_linked_lists",
#    "candy_crush",
#    "delete_middle_node_linked_list",
#    "is_matrix_monotonic",
#    "longest_common_prefix",
#    "max_profit",
#    "spiral_order_matrix",
#    "toeplitz_matrix",
#    "two_sum",
#    "valid_parens",
#  ]
#)

py_library_test(
    name="binary_trees_are_identical",
    deps = ["//python_solutions/util:tree"],
    test_deps = [
        "//python_solutions/util:tree", 
    ],
)

py_library_test(
    name="binary_tree_to_linked_list",
    deps = ["//python_solutions/util:tree"],
    test_deps = [
        "//python_solutions/util:tree", 
    ],
)

py_library(
    name="buildings_with_ocean_view",
    srcs = ["buildings_with_ocean_view.py"],
)

py_library_test(
    name="candy_crush",
    test_deps = [
        "//python_solutions/util:linked_list", 
    ],
)

py_library(
    name="climb_stairs_by_n_steps",
    srcs = ["climb_stairs_by_n_steps.py"],
)

py_library(
    name="construct_string",
    srcs = ["construct_string.py"],
)

py_library_test(
    name = "delete_middle_node_linked_list",
    deps = ["//python_solutions/util:linked_list"],
    test_deps = [
        "//python_solutions/util:linked_list", 
    ],
)

py_library_test(
    name = "find_matrix_monotonic",
)

py_library(
    name="grid_traveler",
    srcs = ["grid_traveler.py"],
)

py_library(
    name="is_tree_symmetric",
    srcs = ["is_tree_symmetric.py"],
)

py_library_test(
    name = "is_matrix_monotonic",
)

py_library_test(
    name = "longest_common_prefix",
)

py_library_test(
    name = "longest_substring_no_repeats",
)

py_library(
    name="max_consecutive_ones",
    srcs = ["max_consecutive_ones.py"],
)

py_library_test(
    name = "max_profit",
)

py_library_test(
    name="maximum_subarray",
)

#py_library(
#    name="maximize_array_sum",
#)

py_library(
    name="merge_intervals",
    srcs = ["merge_intervals.py"],
)

py_library(
    name="merge_sort",
    srcs = ["merge_sort.py"],
)

py_library(
    name="merged_two_sorted_linked_list",
    srcs = ["merged_two_sorted_linked_list.py"],
)

py_library(
    name="mirror_binary_tree",
    srcs = ["mirror_binary_tree.py"],
)

py_library_test(
    name = "spiral_order_matrix",
)

py_library(
    name="subsets",
    srcs = ["subsets.py"],
)

py_library(
    name="sum_to",
    srcs = ["sum_to.py"],
)

py_library_test(
    name = "toeplitz_matrix",
)

py_library_test(
    name = "two_sum",
)

py_library_test(
    name = "three_sum",
)

py_library(
    name="two_city_scheduling",
    srcs = ["two_city_scheduling.py"],
)

py_library_test(
    name = "valid_parens",
)

