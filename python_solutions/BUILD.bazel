load("@pip//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")
load("//pytest_wrapper:defs.bzl", "py_pytest_test")

py_library(
    name = "lib",
    srcs = glob([
        "*.py",
        ]),
    visibility = ["//visibility:public"],
    deps = [
        "//python_solutions/util:linked_list"
        ],
    )

#py_image(
#    name = "img",
#    binary = ":python_solutions",
#    visibility = ["//visibility:public"],
#)

#py_pytest_test(
#    name = "test",
#    srcs = glob(["test/*_test.py"]),
#    deps = [
#        ":lib",
#        "//python_solutions/util:test",
#    ],
#)

py_library(
    name = "add_two_linked_lists",
    srcs = ["add_two_linked_lists.py"],
    deps = ["//python_solutions/util:linked_list"],
)

py_test(
    name = "add_two_linked_lists_test",
    srcs = ["test/add_two_linked_lists_test.py"],
    deps = [
        "add_two_linked_lists", 
        "//python_solutions/util:linked_list", 
        "//python_solutions/util:test"
    ],
)

py_binary(
    name="binary_trees_are_identical",
    srcs = ["binary_trees_are_identical.py"],
    deps = [],
)

py_binary(
    name="buildings_with_ocean_view",
    srcs = ["buildings_with_ocean_view.py"],
    deps = [],
)

py_binary(
    name="candy_crush",
    srcs = ["candy_crush.py"],
    deps = [],
)

py_test(
    name = "candy_crush_test",
    srcs = ["test/candy_crush_test.py"],
    deps = [
        "candy_crush", 
        "//python_solutions/util:linked_list", 
        "//python_solutions/util:test"
    ],
)

py_binary(
    name="climb_stairs_by_n_steps",
    srcs = ["climb_stairs_by_n_steps.py"],
)

py_binary(
    name="construct_string",
    srcs = ["construct_string.py"],
)

py_binary(
    name="grid_traveler",
    srcs = ["grid_traveler.py"],
)

py_binary(
    name="is_tree_symmetric",
    srcs = ["is_tree_symmetric.py"],
)

py_binary(
    name = "longest_common_prefix",
    srcs = ["longest_common_prefix.py"],
)

py_test(
    name = "longest_common_prefix_test",
    srcs = ["test/longest_common_prefix_test.py"],
    deps = [
      "//python_solutions/util:test",
      "longest_common_prefix",
    ],
)


py_binary(
    name="max_consecutive_ones",
    srcs = ["max_consecutive_ones.py"],
    deps = [],
)

py_binary(
    name = "max_profit",
    srcs = ["max_profit.py"],
    deps = [],
)

py_test(
    name = "max_profit_test",
    srcs = ["test/max_profit_test.py"],
    deps = [
        "max_profit",
        "//python_solutions/util:test",
    ],
)

py_binary(
    name="maximize_array_sum",
    srcs = ["maximize_array_sum.py"],
    deps = [],
)

py_binary(
    name="merge_intervals",
    srcs = ["merge_intervals.py"],
    deps = [],
)

py_binary(
    name="merge_sort",
    srcs = ["merge_sort.py"],
    deps = [],
)

py_binary(
    name="merged_two_sorted_linked_list",
    srcs = ["merged_two_sorted_linked_list.py"],
    deps = [],
)

py_binary(
    name="mirror_binary_tree",
    srcs = ["mirror_binary_tree.py"],
    deps = [],
)

py_binary(
    name="subsets",
    srcs = ["subsets.py"],
    deps = [],
)

py_binary(
    name="sum_to",
    srcs = ["sum_to.py"],
    deps = [],
)

py_binary(
    name="three_sum",
    srcs = ["three_sum.py"],
    deps = [],
)

py_binary(
    name = "two_sum",
    srcs = ["two_sum.py"],
    deps = [],
)

py_test(
    name = "two_sum_test",
    srcs = ["test/two_sum_test.py"],
    deps = [
      "//python_solutions/util:test",
      "two_sum",
    ],
)

py_binary(
    name="two_city_scheduling",
    srcs = ["two_city_scheduling.py"],
    deps = [],
)
