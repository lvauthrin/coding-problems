load("@pip//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_library")
load(":generate_files.bzl", "py_library_test")
#load("//pytest_wrapper:defs.bzl", "py_pytest_test")


py_library_test(
    name = "add_two_linked_lists",
    deps = ["//python_solutions/util:linked_list"],
    test_deps = [
        "//python_solutions/util:linked_list", 
        "//python_solutions/util:test"
    ],
)

py_library(
    name="binary_trees_are_identical",
    srcs = ["binary_trees_are_identical.py"],
)

py_library(
    name="buildings_with_ocean_view",
    srcs = ["buildings_with_ocean_view.py"],
)

py_library_test(
    name="candy_crush",
    test_deps = [
        "//python_solutions/util:linked_list", 
        "//python_solutions/util:test"
    ],
)

py_library(
    name="climb_stairs_by_n_steps",
    srcs = ["climb_stairs_by_n_steps.py"],
)

py_library(
    name="construct_string",
    srcs = ["construct_string.py"],
)

py_library_test(
    name = "delete_middle_node_linked_list",
    deps = ["//python_solutions/util:linked_list"],
    test_deps = [
        "//python_solutions/util:linked_list", 
        "//python_solutions/util:test"
    ],
)

py_library_test(
    name = "find_matrix_monotonic",
    test_deps = [
      "//python_solutions/util:test",
    ],
)

py_library(
    name="grid_traveler",
    srcs = ["grid_traveler.py"],
)

py_library(
    name="is_tree_symmetric",
    srcs = ["is_tree_symmetric.py"],
)

py_library_test(
    name = "is_matrix_monotonic",
    test_deps = [
      "//python_solutions/util:test",
    ],
)

py_library_test(
    name = "longest_common_prefix",
    test_deps = [
      "//python_solutions/util:test",
    ],
)

py_library(
    name="max_consecutive_ones",
    srcs = ["max_consecutive_ones.py"],
    deps = [],
)

py_library_test(
    name = "max_profit",
    test_deps = [
        "//python_solutions/util:test",
    ],
)

py_library(
    name="maximize_array_sum",
    srcs = ["maximize_array_sum.py"],
    deps = [],
)

py_library(
    name="merge_intervals",
    srcs = ["merge_intervals.py"],
    deps = [],
)

py_library(
    name="merge_sort",
    srcs = ["merge_sort.py"],
    deps = [],
)

py_library(
    name="merged_two_sorted_linked_list",
    srcs = ["merged_two_sorted_linked_list.py"],
    deps = [],
)

py_library(
    name="mirror_binary_tree",
    srcs = ["mirror_binary_tree.py"],
    deps = [],
)

py_library_test(
    name = "spiral_order_matrix",
    test_deps = [
      "//python_solutions/util:test",
    ],
)
py_library(
    name="subsets",
    srcs = ["subsets.py"],
    deps = [],
)

py_library(
    name="sum_to",
    srcs = ["sum_to.py"],
)

py_library_test(
    name = "toeplitz_matrix",
)

py_library(
    name="three_sum",
    srcs = ["three_sum.py"],
)

py_library_test(
    name = "two_sum",
    test_deps = [
      "//python_solutions/util:test",
    ],
)

py_library(
    name="two_city_scheduling",
    srcs = ["two_city_scheduling.py"],
)

py_library_test(
    name = "valid_parens",
    test_deps = [
      "//python_solutions/util:test",
    ],
)

